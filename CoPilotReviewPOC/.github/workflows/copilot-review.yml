name: Copilot Enhanced Reviewon:  pull_request:    types: [opened, synchronize, reopened]  pull_request_review_comment:    types: [created]permissions:  contents: read  pull-requests: write  security-events: write  actions: readjobs:  review:    runs-on: ubuntu-latest    steps:      - name: Checkout code        uses: actions/checkout@v4        with:          fetch-depth: 0      - name: Setup .NET        uses: actions/setup-dotnet@v4        with:          dotnet-version: '9.0.x'      # Initialize CodeQL      - name: Initialize CodeQL        uses: github/codeql-action/init@v3        with:          languages: csharp      # Install required tools      - name: Install tools        run: |          dotnet tool install -g dotnet-format          dotnet tool install -g dotnet-reportgenerator-globaltool      # Code style and formatting      - name: Check code formatting        run: dotnet format --verify-no-changes --verbosity diagnostic || echo "::warning::Code format issues detected"      # Dependency check      - name: Restore dependencies        run: dotnet restore      # Build      - name: Build project        run: dotnet build --no-restore      # Tests with coverage      - name: Run tests with coverage        run: dotnet test --no-build --collect:"XPlat Code Coverage"      # Generate coverage report      - name: Generate coverage report        run: |          reportgenerator -reports:"**/coverage.cobertura.xml" -targetdir:"coveragereport" -reporttypes:Html      # Perform CodeQL Analysis      - name: Perform CodeQL Analysis        uses: github/codeql-action/analyze@v3        with:          category: "/language:csharp"      # GitHub Copilot for PRs      - name: GitHub Copilot PR Review        uses: github/copilot-chat-feedback@v1        with:          github-token: ${{ secrets.GITHUB_TOKEN }}          feedback-type: "pr-feedback"      # Post analysis summary      - name: Post Analysis Summary        if: always()        uses: actions/github-script@v7        with:          github-token: ${{ secrets.GITHUB_TOKEN }}          script: |            const fs = require('fs');                        let summary = `## ü§ñ Copilot PR Analysis Summary\n\n`;                        // Add coverage info if available            if (fs.existsSync('coveragereport/Summary.txt')) {              const coverage = fs.readFileSync('coveragereport/Summary.txt', 'utf8');              summary += `### üìä Test Coverage\n${coverage}\n\n`;            }                        summary += `### üîç Review Points\n`;            summary += `- Clean Code Analysis\n`;            summary += `  - Naming conventions and code organization\n`;            summary += `  - SOLID principles adherence\n`;            summary += `  - Code duplication check\n\n`;                        summary += `### üõ°Ô∏è Security Checks\n`;            summary += `- Dependency vulnerabilities scan\n`;            summary += `- Code injection prevention\n`;            summary += `- Secure coding practices\n\n`;                        await github.rest.issues.createComment({              owner: context.repo.owner,              repo: context.repo.repo,              issue_number: context.issue.number,              body: summary            });